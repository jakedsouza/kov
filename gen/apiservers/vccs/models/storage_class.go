package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// StorageClass storage class
// swagger:model storageClass
type StorageClass struct {

	// Flash read cache reservation
	CacheReservation int32 `json:"cacheReservation,omitempty"`

	// the name of the datastore to create the volume in
	// Required: true
	// Min Length: 1
	Datastore *string `json:"datastore"`

	// Number of disk stripes per object
	DiskStripes int32 `json:"diskStripes,omitempty"`

	// diskformat
	// Required: true
	Diskformat DiskFormat `json:"diskformat"`

	// Force provisioning
	ForceProvisioning bool `json:"forceProvisioning,omitempty"`

	// Number of failures to tolerate
	HostFailuresToTolerate int32 `json:"hostFailuresToTolerate,omitempty"`

	// IOPS limit for object
	IopsLimit int64 `json:"iopsLimit,omitempty"`

	// the name of the storage class
	// Required: true
	Name *string `json:"name"`

	// Object space reservation
	ObjectSpaceReservation int64 `json:"objectSpaceReservation,omitempty"`
}

// Validate validates this storage class
func (m *StorageClass) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatastore(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDiskformat(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageClass) validateDatastore(formats strfmt.Registry) error {

	if err := validate.Required("datastore", "body", m.Datastore); err != nil {
		return err
	}

	if err := validate.MinLength("datastore", "body", string(*m.Datastore), 1); err != nil {
		return err
	}

	return nil
}

func (m *StorageClass) validateDiskformat(formats strfmt.Registry) error {

	if err := m.Diskformat.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("diskformat")
		}
		return err
	}

	return nil
}

func (m *StorageClass) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}
