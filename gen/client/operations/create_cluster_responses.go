///////////////////////////////////////////////////////////////////////
// Copyright (C) 2017 VMware, Inc. All rights reserved.
// -- VMware Confidential
///////////////////////////////////////////////////////////////////////
package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/supervised-io/kov/gen/models"
)

// CreateClusterReader is a Reader for the CreateCluster structure.
type CreateClusterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateClusterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 202:
		result := NewCreateClusterAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 409:
		result := NewCreateClusterConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewCreateClusterDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateClusterAccepted creates a CreateClusterAccepted with default headers values
func NewCreateClusterAccepted() *CreateClusterAccepted {
	return &CreateClusterAccepted{}
}

/*CreateClusterAccepted handles this case with default header values.

create cluster task has been accepted
*/
type CreateClusterAccepted struct {
	Payload models.TaskID
}

func (o *CreateClusterAccepted) Error() string {
	return fmt.Sprintf("[POST /clusters][%d] createClusterAccepted  %+v", 202, o.Payload)
}

func (o *CreateClusterAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateClusterConflict creates a CreateClusterConflict with default headers values
func NewCreateClusterConflict() *CreateClusterConflict {
	return &CreateClusterConflict{}
}

/*CreateClusterConflict handles this case with default header values.

The provided cluster name already exists
*/
type CreateClusterConflict struct {
	Payload *models.Error
}

func (o *CreateClusterConflict) Error() string {
	return fmt.Sprintf("[POST /clusters][%d] createClusterConflict  %+v", 409, o.Payload)
}

func (o *CreateClusterConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateClusterDefault creates a CreateClusterDefault with default headers values
func NewCreateClusterDefault(code int) *CreateClusterDefault {
	return &CreateClusterDefault{
		_statusCode: code,
	}
}

/*CreateClusterDefault handles this case with default header values.

Error
*/
type CreateClusterDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the create cluster default response
func (o *CreateClusterDefault) Code() int {
	return o._statusCode
}

func (o *CreateClusterDefault) Error() string {
	return fmt.Sprintf("[POST /clusters][%d] createCluster default  %+v", o._statusCode, o.Payload)
}

func (o *CreateClusterDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
