///////////////////////////////////////////////////////////////////////
// Copyright (C) 2017 VMware, Inc. All rights reserved.
// -- VMware Confidential
///////////////////////////////////////////////////////////////////////
package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterConfig cluster config
// swagger:model clusterConfig
type ClusterConfig struct {

	// credentials
	Credentials *Credentials `json:"credentials,omitempty"`

	// the management network for the deployed nodes, will have ssh port enabled
	// Required: true
	ManagementNetwork *string `json:"managementNetwork"`

	// master size
	MasterSize InstanceSize `json:"masterSize,omitempty"`

	// the minimum number of nodes that can be deployed
	MaxNodes int32 `json:"maxNodes,omitempty"`

	// the minimum number of nodes that can be deployed
	// Required: true
	// Minimum: 1
	MinNodes *int32 `json:"minNodes"`

	// the cluster name, should be valid for use in dns names
	// Required: true
	// Max Length: 63
	// Min Length: 3
	// Pattern: ^[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?(\.[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?)*$
	Name *string `json:"name"`

	// the number of master nodes to create
	// Required: true
	// Minimum: 1
	NoOfMasters *int32 `json:"noOfMasters"`

	// the network used for node-to-node communication, defaults to management network
	NodeNetwork string `json:"nodeNetwork,omitempty"`

	// node resource pools
	NodeResourcePools []string `json:"nodeResourcePools"`

	// node size
	NodeSize InstanceSize `json:"nodeSize,omitempty"`

	// the public network to expose ports on, defaults to management network
	PublicNetwork string `json:"publicNetwork,omitempty"`

	// resource pool
	// Required: true
	// Min Length: 1
	ResourcePool string `json:"resourcePool"`

	// storage classes
	StorageClasses []*StorageClass `json:"storageClasses"`

	// the thumbprint of the vCenter server certificate
	// Min Length: 57
	// Pattern: [a-fA-F0-9:]+
	Thumbprint string `json:"thumbprint,omitempty"`
}

// Validate validates this cluster config
func (m *ClusterConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentials(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateManagementNetwork(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMasterSize(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMinNodes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNoOfMasters(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNodeResourcePools(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNodeSize(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResourcePool(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStorageClasses(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateThumbprint(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterConfig) validateCredentials(formats strfmt.Registry) error {

	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	if m.Credentials != nil {

		if err := m.Credentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterConfig) validateManagementNetwork(formats strfmt.Registry) error {

	if err := validate.Required("managementNetwork", "body", m.ManagementNetwork); err != nil {
		return err
	}

	return nil
}

func (m *ClusterConfig) validateMasterSize(formats strfmt.Registry) error {

	if swag.IsZero(m.MasterSize) { // not required
		return nil
	}

	if err := m.MasterSize.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("masterSize")
		}
		return err
	}

	return nil
}

func (m *ClusterConfig) validateMinNodes(formats strfmt.Registry) error {

	if err := validate.Required("minNodes", "body", m.MinNodes); err != nil {
		return err
	}

	if err := validate.MinimumInt("minNodes", "body", int64(*m.MinNodes), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *ClusterConfig) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 63); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(*m.Name), `^[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?(\.[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?)*$`); err != nil {
		return err
	}

	return nil
}

func (m *ClusterConfig) validateNoOfMasters(formats strfmt.Registry) error {

	if err := validate.Required("noOfMasters", "body", m.NoOfMasters); err != nil {
		return err
	}

	if err := validate.MinimumInt("noOfMasters", "body", int64(*m.NoOfMasters), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *ClusterConfig) validateNodeResourcePools(formats strfmt.Registry) error {

	if swag.IsZero(m.NodeResourcePools) { // not required
		return nil
	}

	for i := 0; i < len(m.NodeResourcePools); i++ {

		if err := validate.MinLength("nodeResourcePools"+"."+strconv.Itoa(i), "body", string(m.NodeResourcePools[i]), 1); err != nil {
			return err
		}

	}

	return nil
}

func (m *ClusterConfig) validateNodeSize(formats strfmt.Registry) error {

	if swag.IsZero(m.NodeSize) { // not required
		return nil
	}

	if err := m.NodeSize.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("nodeSize")
		}
		return err
	}

	return nil
}

func (m *ClusterConfig) validateResourcePool(formats strfmt.Registry) error {

	if err := validate.RequiredString("resourcePool", "body", string(m.ResourcePool)); err != nil {
		return err
	}

	if err := validate.MinLength("resourcePool", "body", string(m.ResourcePool), 1); err != nil {
		return err
	}

	return nil
}

func (m *ClusterConfig) validateStorageClasses(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageClasses) { // not required
		return nil
	}

	for i := 0; i < len(m.StorageClasses); i++ {

		if swag.IsZero(m.StorageClasses[i]) { // not required
			continue
		}

		if m.StorageClasses[i] != nil {

			if err := m.StorageClasses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("storageClasses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterConfig) validateThumbprint(formats strfmt.Registry) error {

	if swag.IsZero(m.Thumbprint) { // not required
		return nil
	}

	if err := validate.MinLength("thumbprint", "body", string(m.Thumbprint), 57); err != nil {
		return err
	}

	if err := validate.Pattern("thumbprint", "body", string(m.Thumbprint), `[a-fA-F0-9:]+`); err != nil {
		return err
	}

	return nil
}
